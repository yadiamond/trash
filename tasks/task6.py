# Исполнитель «Корректор» обрабатывает только маленькие буквы латинского алфавита.
# Исполнителя "Корректор" умеет:
# - подсчитывать количество символов в слове.
# - вставлять буквы в слове в заданное место;
# - заменять одну букву на другую.
# Вам задан алгоритм.
# - Вычисляется длина исходной цепочки символов. Если она чётна, то в середину цепочки
# добавляется буква ’a’. Если длина исходной цепочки нечётна, то в начало цепочки добавляется
# буква ’b’.
# - В полученной цепочке символов каждая буква заменяется буквой, следующей за ней в
# английском алфавите (’a’ – на ’b’, ’b’ – на ’c’ и так далее, ’z’ – на ’a’).
# Получившаяся таким образом цепочка является результатом работы алгоритма.
# Например, если применить данный алгоритм к цепочке ’cat’, то получится цепочка ’cdbu’. Если
# применить алгоритм к этому результату ещё раз, то получится цепочка ’debcv’.
# Вам необходимо для заданной цепочки (назовём ее базовой) ответить на один из 2 вопросов:
# 1. Какая цепочка символов получится, если дважды применить этот алгоритм к базовой?
# 2. В результате двухкратной обработки какой исходной цепочки, получилась базовая?
# (гарантируется, что такая исходная цепочка существует)
# Замечание Алфавит английского языка: a b c d e f g h i j k l m n o p q r s t u v w x y z
# Формат входных данных:
# На вход программе в первой строке поступает цепочка символов. Длина цепочки не превышает
# 100 символов. Во второй строке записан цифрой номер вопроса 1 или 2.
# Формат выходных данных:
# В качестве результата Ваша программа должна вывести ответ на вопрос.

s = input()
q = int(input())

def alg1(s):
    if len(s) % 2 == 0:
        mid = len(s) // 2
        s = s[:mid] + 'a' + s[mid:]
    else:
        s = 'b' + s

    alp = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    news = []
    for i in range(len(s)):
        if s[i] == 'z':
            news.append('a')
        else:
            news.append(alp[(alp.index(s[i]) + 1)])
    return ''.join(news)

def alg2(s):
    alp = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
    news = []
    for i in range(len(s)):
        if s[i] == 'a':
            news.append('z')
        else:
            news.append(alp[(alp.index(s[i]) - 1)])
    s = ''.join(news)
    if len(s) % 2 == 0:
        s = s[1:]
    else:
        s = s[:(len(s) // 2)] + s[(len(s) // 2 + 1):]
    return s
if q == 1:
    print(alg1(alg1(s)))
else:
    print(alg2(alg2(s)))